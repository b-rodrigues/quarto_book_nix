[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A fully reproducible Quarto book template",
    "section": "",
    "text": "Welcome!"
  },
  {
    "objectID": "index.html#this-book-template-gets-built-on-github-actions-at-each-push",
    "href": "index.html#this-book-template-gets-built-on-github-actions-at-each-push",
    "title": "A fully reproducible Quarto book template",
    "section": "This book template gets built on Github Actions at each push",
    "text": "This book template gets built on Github Actions at each push\nThis Quarto book template gets automatically built on Github Actions each time you push changes. To ensure reproducibility, the Nix package manager gets used to install all the dependencies you need:\n\nAn R version;\nA library of R packages;\nQuarto;\nTeXLive packages;\nany other system-level dependency that is required.\n\nBecause a specific nixpkgs revision gets used, exactly the same pieces of software get always installed. So you don’t need to pin a specific version of R, nor use {renv}, nor make sure to use a fixed version of a runner (typically ubuntu-22.04) to ensure reproducibility of your book. The next chapter explain how Nix works in more detail and why it’s enough to use it to ensure reproducibility.\nEach time a commit gets pushed, a website gets built, an Epub for E-ink readers (such as the Kindle or the Kobo) and a PDF get built. The PDF is also in the right format and ready for self-publishing on Amazon Kindle Direct Publishing."
  },
  {
    "objectID": "nix_nixpgs.html#the-nix-package-manager",
    "href": "nix_nixpgs.html#the-nix-package-manager",
    "title": "1  Nix",
    "section": "1.1 The Nix package manager",
    "text": "1.1 The Nix package manager\nNix is a package manager available for Linux, Windows (on WSL2) and macOS. Its mono-repository, nixpkgs, contains more than 80’000 packages, among them the entirety of the R packages released on CRAN and Bioconductor, as well as R itself (and RStudio, but only for Linux and Windows, as of writing). This means that it is possible to use the Nix package manager to install R, the R packages you require for your day-to-day work, and any other packages that you might need (for example, if you need Python and Python packages, you can install these as well).\nThe question that remains unanswered though, is why use the Nix package manager to install all this software instead of using the usual ways of first installing R, and then using install.packages() to install any required packages?\nThere are at least three reasons. The first is that it is possible to define so-called default.nix files that define an environment. This environment will contain all the packages that you require, and will not interfere with any other packages installed on your system. This essentially means that you can have project-specific default.nix files, each specifying the requirements for specific projects. The second reason is that when installing a package that requires system-level dependencies, {rJava} for example, all the lower-level dependencies get automatically installed. Forget about reading error messages of install.packages() to find which system development library you need to install first. The third reason, is that you can pin a specific revision of nixpkgs to ensure reproducibility."
  },
  {
    "objectID": "nix_nixpgs.html#ensuring-reproducibility-with-nix",
    "href": "nix_nixpgs.html#ensuring-reproducibility-with-nix",
    "title": "1  Nix",
    "section": "1.2 Ensuring reproducibility with Nix",
    "text": "1.2 Ensuring reproducibility with Nix\nThe nixpkgs mono-repository is “just” a Github repsitory which you can find here: https://github.com/NixOS/nixpkgs. This repository contains Nix expressions to build and install more than 80’000 packages and you can search for installable Nix packages here.\nBecause nixpkgs is a Github repository, it is possible to use a specific commit hash to install the packages as they were at a specific point in time. For example, if you use this commit, 7c9cc5a6e, you’ll get the very latest packages as of the 19th of October 2023, but if you used this one instead: 976fa3369, you’ll get packages from the 19th of August 2023.\nYou can declare which revision of nixpkgs to use at the top of a default.nix file. Here is what such a file looks like:\nlet\n pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz\") {};\n rpkgs = builtins.attrValues {\n  inherit (pkgs.rPackages) tidymodels vetiver targets xgboost;\n};\n system_packages = builtins.attrValues {\n  inherit (pkgs) R;\n};\nin\n pkgs.mkShell {\n  buildInputs = [  rpkgs system_packages  ];\n }\nAs you can see, we import a specific revision of the nixpkgs Github repository to ensure that we always get the same packages in our environment.\nIf you’re unfamiliar with Nix, this file can be quite scary. But don’t worry, with my co-author Philipp Baumann we developed an R package called {rix} which generate this default.nix files for you."
  },
  {
    "objectID": "nix_nixpgs.html#the-r-rix-package",
    "href": "nix_nixpgs.html#the-r-rix-package",
    "title": "1  Nix",
    "section": "1.3 The R {rix} package",
    "text": "1.3 The R {rix} package\n{rix} is an R package that makes it very easy to generate very complex default.nix files. These files can in turn be used by the Nix package manager to build project-specific environments. The book’s Github repository contains a file called define_env.R with the following content:\n\nlibrary(rix)\n\nrix(r_ver = \"4.3.1\",\n    r_pkgs = c(\"quarto\"),\n    system_pkgs = \"quarto\",\n    tex_pkgs = c(\n      \"amsmath\",\n      \"fvextra\",\n      \"environ\",\n      \"fontawesome5\",\n      \"orcidlink\",\n      \"pdfcol\",\n      \"tcolorbox\",\n      \"tikzfill\"\n    ),\n    ide = \"other\",\n    shell_hook = \"\",\n    project_path = \".\",\n    overwrite = TRUE,\n    print = TRUE)\n\n{rix} ships the rix() function which takes several arguments. These arguments allow you to specify an R version, a list of R packages, a list of system packages, TeXLive packages and other options that allow you to specify your requirements. Running this code generates this default.nix file:\n# This file was generated by the {rix} R package v0.4.1 on 2023-10-19\n# with following call:\n# >rix(r_ver = \"976fa3369d722e76f37c77493d99829540d43845\",\n#  > r_pkgs = c(\"quarto\"),\n#  > system_pkgs = \"quarto\",\n#  > tex_pkgs = c(\"amsmath\",\n#  > \"fvextra\",\n#  > \"environ\",\n#  > \"fontawesome5\",\n#  > \"orcidlink\",\n#  > \"pdfcol\",\n#  > \"tcolorbox\",\n#  > \"tikzfill\"),\n#  > ide = \"other\",\n#  > project_path = \".\",\n#  > overwrite = TRUE,\n#  > print = TRUE,\n#  > shell_hook = \"\")\n# It uses nixpkgs' revision 976fa3369d722e76f37c77493d99829540d43845 for reproducibility purposes\n# which will install R version 4.3.1\n# Report any issues to https://github.com/b-rodrigues/rix\nlet\n pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz\") {};\n rpkgs = builtins.attrValues {\n  inherit (pkgs.rPackages) quarto;\n};\n  tex = (pkgs.texlive.combine {\n  inherit (pkgs.texlive) scheme-small amsmath fvextra environ fontawesome5 orcidlink pdfcol tcolorbox tikzfill;\n});\n system_packages = builtins.attrValues {\n  inherit (pkgs) R glibcLocalesUtf8 quarto;\n};\n  in\n  pkgs.mkShell {\n    LOCALE_ARCHIVE = if pkgs.system == \"x86_64-linux\" then  \"${pkgs.glibcLocalesUtf8}/lib/locale/locale-archive\" else \"\";\n    LANG = \"en_US.UTF-8\";\n    LC_ALL = \"en_US.UTF-8\";\n    LC_TIME = \"en_US.UTF-8\";\n    LC_MONETARY = \"en_US.UTF-8\";\n    LC_PAPER = \"en_US.UTF-8\";\n    LC_MEASUREMENT = \"en_US.UTF-8\";\n\n    buildInputs = [  rpkgs tex system_packages  ];\n      \n  }\nYou can now use this file to work on your book locally by first building the environment and then use it. To know more about using default.nix files on a day-to-day basis, read this vignette.\nIn the next chapter, I’m going to explain how this book gets built on Github Actions."
  },
  {
    "objectID": "nix_actions.html#setup",
    "href": "nix_actions.html#setup",
    "title": "2  Building on Github Actions with Nix",
    "section": "2.1 Setup",
    "text": "2.1 Setup\nJust like when building using the usual approches, you first need to build the book locally, on your computer, once. For this, after having generated the default.nix file, you can build the environment using nix-build, and then drop in a shell with nix-shell (if this previous sentence is confusing, make sure you read the vignette linked at the end of the previous chapter).\nOnce in that shell, run quarto publish gh-pages. This will render the book, and make sure that everything gets setup properly. If the book does not render, this could mean that you’re missing some dependency. Make sure to specify all the requirements in the define_env.R script and that you re-generated the default.nix file. If the quarto publish gh-pages command succeeds, you’re all set. Editing the book and pushing will build the book on Github Actions."
  },
  {
    "objectID": "nix_actions.html#the-github-actions-workflow-file",
    "href": "nix_actions.html#the-github-actions-workflow-file",
    "title": "2  Building on Github Actions with Nix",
    "section": "2.2 The Github Actions workflow file",
    "text": "2.2 The Github Actions workflow file\nHere is what the workflow file looks like:\nname: Build book using Nix\n\non:\n  push:\n    branches:\n      - main\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout Code\n      uses: actions/checkout@v3\n\n    - name: Install Nix\n      uses: DeterminateSystems/nix-installer-action@main\n      with:\n        logger: pretty\n        log-directives: nix_installer=trace\n        backtrace: full\n\n    - name: Nix cache\n      uses: DeterminateSystems/magic-nix-cache-action@main\n\n    - name: Build development environment\n      run: |\n        nix-build\n\n    - name: Publish to GitHub Pages (and render)\n      uses: b-rodrigues/quarto-nix-actions/publish@main\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} \n\nThe first step Checkout code makes the code availalbe to the rest of the steps. I then install Nix on this runner using the Determinate Systems nix-installer-action then I use another action from Determinate Systems, the magic-nix-cache-action. This action caches all the packages so that they don’t need to get re-downloaded each time a change gets pushed, speeding up the process by a lot. The development environment gets then built using nix-build.\nFinally, an action I defined runs, quarto-nix-actions/publish. This is a fork of the quarto-actions/publish action which you can find here. My fork simply makes sure that the quarto render and quarto publish commands run in the Nix environment defined for the project."
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "3  Conclusion",
    "section": "",
    "text": "In conclusion, Nix rocks."
  }
]